import "primitives/core.fil";
import "examples/sequential.fil";

comp main<'G: 1>(
    go: interface['G],
    op: ['G+3, 'G+4] 1,
    left: ['G, 'G+1] 32,
    right: ['G, 'G+1] 32,
) -> (out: ['G+3, 'G+4] 32) 
{
    // Define two circuits to represent 32-bit adders & multipliers
    // We use FastMult, which is a multiplier implementation that only has delay 1
    A := new Add[32];
    M := new FastMult[32];

    // Create two invocations of the adder & multiplier when the event G occurs
    m0 := M<'G>(left, right);
    a0 := A<'G>(left, right);

    // Use registers to hold the adder's value
    // (Since we want the ALU to process inputs every cycle, we have to create
    //  a chain of registers that propagate values forward in time)
    r0 := new Register[32]<'G, 'G+2>(a0.out);
    r1 := new Register[32]<'G+1, 'G+3>(r0.out);
    r2 := new Register[32]<'G+2, 'G+4>(r1.out);

    // Use the multiplexer when the mult's output is ready
    mx := new Mux[32]<'G+3>(op, r2.out, m0.out);
    out = mx.out;
}
